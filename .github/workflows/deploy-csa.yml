name: Build and Deploy to Azure Web App

on:
  push:
    branches:
      - main

env:
  ACR_NAME: securetrack
  WEBAPP_NAME: csa-sfo
  RG_NAME: RG-EU-STB-PRD-01
  IMAGE_NAME: csa_backend

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout the repo
      - name: "Checkout GitHub repository"
        uses: actions/checkout@v4

      # 2) Login to Azure using the service principal
      - name: "Login to Azure"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANT_ID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTION_ID }}

      # 3) Setup buildx
      - uses: docker/setup-buildx-action@v2

      # 4) Log in to ACR
      - name: "Log in to ACR"
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Fetch ACR loginServer
        id: acr
        run: |
          echo "LOGIN_SERVER=$(az acr show --name ${{ env.ACR_NAME }} \
                            --query loginServer --output tsv)" >> $GITHUB_ENV
      # # 4.4) Cleanup local Docker (containers/images) on the runner to ensure a clean slate
      # - name: "Cleanup local Docker (containers/images)"
      #   run: |
      #     docker ps -aq | xargs -r docker rm -f || true
      #     docker system prune -af --volumes || true

      # # 4.5) Purge existing images in ACR repo before building/pushing a new one
      # - name: "Purge existing ACR images for repository"
      #   run: |
      #     set -e
      #     echo "Fetching tags for repository ${{ env.IMAGE_NAME }} in ACR ${{ env.ACR_NAME }}..."
      #     TAGS=$(az acr repository show-tags --name ${{ env.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --output tsv || true)
      #     if [ -n "$TAGS" ]; then
      #       echo "Deleting existing tags:"
      #       for TAG in $TAGS; do
      #         echo " - ${{ env.IMAGE_NAME }}:$TAG"
      #         az acr repository delete --yes --name ${{ env.ACR_NAME }} --image ${{ env.IMAGE_NAME }}:$TAG
      #       done
      #     else
      #       echo "No existing tags found."
      #     fi

      # Cleanup previous containers/images
      - name: "Cleanup local Docker (containers/images)"
        run: |
          docker ps -aq | xargs -r docker rm -f || true
          docker system prune -af --volumes || true

      # Purge ACR repository entirely (handles last manifest/tag case)
      - name: "Delete ACR repository (force)"
        run: |
          REPO="${{ env.IMAGE_NAME }}"
          ACR="${{ env.ACR_NAME }}"
          echo "Deleting entire repository $REPO from ACR $ACR (safe; will be recreated by push)..."
          az acr repository delete --name "$ACR" --repository "$REPO" --yes || true

      # 5) Build+push multi-arch (we only target amd64 here)
      - name: Build & push amd64 image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $LOGIN_SERVER/${{ env.IMAGE_NAME }}:latest \
            --tag $LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --file csa_backend/Dockerfile \
            csa_backend/

      # 6) Deploy the new image to Azure Web App
      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          # slot-name: production
          # images: ${{ env.ACR_NAME }}-dzc8a3deejhje7d4.azurecr.io/${{ env.IMAGE_NAME }}:latest
          images: ${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
